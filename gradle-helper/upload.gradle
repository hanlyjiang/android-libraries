apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    getArchiveClassifier().set('sources')
}

task javadocJar(type: Jar) {
    from javadoc
    getArchiveClassifier().set('javadoc')
}

def PUBLISH_GROUP_ID = "com.github.hanlyjiang"
def PUBLISH_ARTIFACT_ID = "gradle-helper"
def PUBLISH_VERSION = "1.0.1"

publishing {
    publications {
        // 本地AAR 发布
//        localAar(MavenPublication) {
//            groupId PUBLISH_GROUP_ID
//            artifactId PUBLISH_ARTIFACT_ID
//            version PUBLISH_VERSION
//
//            artifact jar
//            artifact sourcesJar
//            artifact javadocJar
//        }

        "${PUBLISH_VERSION.endsWith('SNAPSHOT') ? "snapshot" : "release"}"(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            artifact jar
            artifact kotlinSourcesJar
            artifact javadocJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'description'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/hanlyjiang/testrepo'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'hanlyjiang'
                        name = 'hanlyjiang'
                        email = 'hanlyjiang@gmail.com'
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/hanlyjiang/android-library.git'
                    developerConnection = 'scm:git:ssh://github.com/hanlyjiang/android-library.git'
                    url = 'https://github.com/github.com/hanlyjiang/android-library/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.group == "com.android.tools.build" && it.name == "gradle") {
                            return
                        }
                        if (it.group == null) {
                            return
                        }
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = PUBLISH_VERSION.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }

        maven {
            name = "projectLocal-${PUBLISH_VERSION.endsWith('SNAPSHOT') ? "snapshot" : "release"}"
            def dir = PUBLISH_VERSION.endsWith('SNAPSHOT') ? "snapshot" : "release"
            setUrl(new File(rootProject.rootDir, "local-maven-repo${File.separator}${dir}").absolutePath)
        }
    }
}
signing {
    sign publishing.publications
}